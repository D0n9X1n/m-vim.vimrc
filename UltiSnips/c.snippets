snippet cmp
int cmp(const void* a, const void* b) {
    return *(int*)a - *(int*)b;
}
endsnippet

snippet read
freopen("./in.txt","r",stdin);
endsnippet

snippet r
return ${1};
endsnippet

snippet linuxc
#include <assert.h>
#include <ctype.h>
#include <errno.h>
#include <float.h>
#include <iso646.h>
#include <limits.h>
#include <locale.h>
#include <math.h>
#include <setjmp.h>
#include <signal.h>
#include <stdarg.h>
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <wchar.h>
#include <wctype.h>

int main(int argc, char *argv[]) {
${1}
	return 0;
}
endsnippet

snippet acm
#include <cstdio>
#include <climits>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <cmath>
#include <iostream>
#include <sstream>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <bitset>
#include <stack>
#include <string>
#include <queue>
#include <list>
#include <iomanip>
#include <limits>
#include <typeinfo>
#include <functional>
#include <numeric>
#include <complex>

using namespace std;

${1}

int main() {
	return 0;
}
endsnippet

snippet while
while (${1}) {
	${2}
}
endsnippet

snippet fori
for (int i = 0; i < ${1}; i++) {
	${2}
}
endsnippet

snippet in
cin >> ${1} >> ${2};
endsnippet

snippet out
cout << ${1} << endl;
endsnippet

snippet cout
cout << ${1} << endl;
endsnippet

snippet if
if (${1}) {
	${2}
}
endsnippet


snippet chead "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:VALUE}
#endif /* ifndef $1 */
endsnippet

snippet fun "function"
${1:void}
${2:function_name}($3)
{
	${VISUAL}$0
}
endsnippet

snippet fund "function declaration"
${1:void}
${2:function_name}($3);
endsnippet

snippet gcd "function gcd"
    void swap(int & a, int & b) {
        int c = a;
        a = b;
        b = c;
    }
    int gcd(int a,int b) {
        if(0 == a) {
            return b;
        }
        if(0 == b) {
            return a;
        }
        if(a > b) {
            swap(a,b);
        }
        for(int c = a % b; c > 0; c = a % b) {
            a = b;
            b = c;
        }
        return b;
    }
endsnippet

snippet bc "function bit count"
int bc(unsigned int n) {
    unsigned int tmp = n - ((n >>1) &033333333333) - ((n >>2) &011111111111);
    return ((tmp + (tmp >>3)) &030707070707) %63;
}
endsnippet


###########################################################################
#                            TextMate Snippets                            #
###########################################################################

priority -50

snippet def "#define ..."
#define $1
endsnippet

snippet #ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif /* ifndef $1 */
endsnippet

snippet #if "#if #endif" b
#if ${1:0}
${VISUAL}$0
#endif
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

snippet main "main() (main)"
int main(int argc, char *argv[])
{
	${VISUAL}$0
	return 0;
}
endsnippet

snippet for "for loop (for)"
for (${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}$0
}
endsnippet

snippet fori "for int loop (fori)"
for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}$0
}
endsnippet

snippet once "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
	snip.rv = ('%s_%s' % (name,rand)).upper()
else:
	snip.rv = snip.c`}
#define $1

${VISUAL}$0

#endif /* end of include guard: $1 */
endsnippet

snippet fprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet eli "else if .. (eli)"
else if (${1:/* condition */}) {
	${VISUAL}$0
}
endsnippet

snippet printf "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`} {
	${0:/* data */}
};
endsnippet

snippet fun "function" b
${1:void}
${2:function_name}($3)
{
	${VISUAL}$0
}
endsnippet

snippet fund "function declaration" b
${1:void}
${2:function_name}($3);
endsnippet

# vim:ft=snippets:
