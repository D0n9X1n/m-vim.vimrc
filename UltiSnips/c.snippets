snippet cmp
int cmp(const void* a, const void* b) {
    return *(int*)a - *(int*)b;
}
endsnippet

snippet read
freopen("./in.txt","r",stdin);
endsnippet

snippet r
return ${1};
endsnippet

snippet linuxc
#include <assert.h>
#include <ctype.h>
#include <errno.h>
#include <float.h>
#include <iso646.h>
#include <limits.h>
#include <locale.h>
#include <math.h>
#include <setjmp.h>
#include <signal.h>
#include <stdarg.h>
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <wchar.h>
#include <wctype.h>

int main(int argc, char *argv[]) {
${1}
	return 0;
}
endsnippet

snippet while
while (${1}) {
	${2}
}
endsnippet

snippet fori
int i;
for (i = 0; i < ${1}; i++) {
	${2}
}
endsnippet

snippet if
if (${1}) {
	${2}
}
endsnippet

snippet chead "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:VALUE}
#endif /* ifndef $1 */
endsnippet

snippet fun "function"
${1:void}
${2:function_name}($3)
{
	${VISUAL}$0
}
endsnippet

snippet fund "function declaration"
${1:void}
${2:function_name}($3);
endsnippet

snippet gcd "function gcd"
void swap(int & a, int & b) {
	int c = a;
	a = b;
	b = c;
}

int gcd(int a,int b) {
	if(0 == a) {
		return b;
	}
	if(0 == b) {
		return a;
	}
	if(a > b) {
		swap(a,b);
	}
	for(int c = a % b; c > 0; c = a % b) {
		a = b;
		b = c;
	}
	return b;
}
endsnippet

snippet bc "function bit count"
int bc(unsigned int n) {
	unsigned int tmp = n - ((n >>1) &033333333333) - ((n >>2) &011111111111);
	return ((tmp + (tmp >>3)) &030707070707) %63;
}
endsnippet


snippet isPrime "is prime"
bool isPrime(int num)
{
    if(num == 2 || num == 3)
        return 1 ;
    if(num % 6 != 1 && num % 6 != 5)
        return 0 ;
    int tmp = sqrt(num);
    for(int i = 5; i <= tmp; i += 6 )
        if(num % i == 0 || num % (i + 2) == 0)
            return 0 ;
    return 1 ;
}
endsnippet
