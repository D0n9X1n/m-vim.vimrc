priority -50

extends c

# We want to overwrite everything in parent ft.
priority -48
###########################################################################
#			    Global functions 						  #
###########################################################################

global !p

def write_docstring_args(arglist, snip):
	args = str(arglist).split(',')

	if len(args) > 1:
		c = 0
		for arg in args:
			if c == 0:
				snip.rv += arg
				c = 1
			else:
				snip += '*       : %s' % arg.strip()
	else:
		snip.rv = args[0]


endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/} (${2:arguments});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet readfile "read file (readF)"
vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet map "map (map)"
map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector "vector (v)"
vector<${1:char}> v$0;
endsnippet

snippet list "list (v)"
list<${1:char}> v$0;
endsnippet

snippet set "set (v)"
set<${1:char}> v$0;
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet cla "An entire .h generator" b
#ifndef ${2:`!v substitute(vim_snippets#Filename('$1_H','ClassName'),'.*','\U&\E','')`}
#define $2

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`} {
    private:
        $3

    public:
        $1();
        virtual ~$1();
};

#endif /* $2 */
endsnippet


snippet func "Basic c++ doxygen function template" b
/**
* @brief: ${4:brief}
*
* @param: `!p write_docstring_args(t[3],snip)`
*
* @return: `!p snip.rv = t[1]`
*/
${1:ReturnType} ${2:FunctionName}(${3:param}) {
  ${0:FunctionBody}
}
endsnippet

snippet kmp "kmp function"
vector<int> __next(string& needle) {
    int n = needle.length();
    vector<int> lps(n, 0);
    for (int i = 1, len = 0; i < n; ) {
        if (needle[i] == needle[len])
            lps[i++] = ++len;
        else if (len) len = lps[len - 1];
        else lps[i++] = 0;
    }
    return lps;
}
int kmp(string haystack, string needle) {
    int m = haystack.length(), n = needle.length();
    if (!n) return 0;
    vector<int> lps = __next(needle);
    for (int i = 0, j = 0; i < m; ) {
        if (haystack[i] == needle[j]) { 
            i++;
            j++;
        }
        if (j == n) return i - j;
        if (i < m && haystack[i] != needle[j]) {
            if (j) j = lps[j - 1];
            else i++;
        }
    }
    return -1;
}
endsnippet

snippet lcs "LCS function"
int LCS(vector<int> nums) {
    vector<int> rev = nums;
    reverse(rev.begin(), rev.end());
    int size = nums.size();
    vector<vector<int> > DP(size + 1, vector<int>(size + 1));
    for (int i = 1; i <= size; ++i) {
        for (int j = 1; j <= size; ++j) {
            if (nums[i - 1] == rev[j - 1]) {
                DP[i][j] = DP[i - 1][j - 1] + 1;
            } else if (DP[i-1][j] >= DP[i][j-1]) {
                DP[i][j] = DP[i - 1][j];
            } else if (DP[i - 1][j] < DP[i][j - 1]) {
                DP[i][j] = DP[i][j - 1];
            }
        }
    }

    return DP[size][size];
}
endsnippet
# vim:ft=snippets:


